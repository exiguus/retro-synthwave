{
  "code": "// Understand canvas 2d context 3d animation\n//  original code: https://github.com/victorqribeiro/retroSynthwave\n\n//\n// Three steps are required to get this animation running:\n// 1. init() the matrix system\n//    create a 2d canvas context\n//    create the matrix and points (x, y, z)\n// 2. update() the initialised matrix\n//    change each point (x, y, z)\n//    call show() and request a animation frame by it self recursively\n// 3. show() the changes\n//    draw changes to the canvas\n//\n// update() call show() and then request the animation frame that call update()\n\n// eslint-disable-next-line no-unused-vars\n\ntype Synthwave = {\n  canvas: HTMLCanvasElement | null\n  c: CanvasRenderingContext2D | null\n  w: number\n  h: number\n  u: number\n  points: Array<Array<{ x: number; y: number; z: number }>> | null\n  offset: number\n  gradient: CanvasGradient | undefined\n  element: HTMLDivElement | null\n  spacing: number\n  zOffset: number\n}\n\ntype InitProps = {\n  element: HTMLDivElement\n  spacing?: number\n  zOffset?: number\n}\n\nconst synthwave: Synthwave = {\n  canvas: null,\n  c: null,\n  w: 0,\n  h: 0,\n  u: 0,\n  points: null,\n  offset: 0,\n  gradient: undefined,\n  element: null,\n  spacing: 0,\n  zOffset: 0,\n}\n\n// spacing: X Coordinate spacing\nfunction init({ element, spacing = 40, zOffset = 10 }: InitProps) {\n  synthwave.element = element\n  synthwave.spacing = spacing\n  synthwave.zOffset = zOffset\n\n  // create canvas element and adjust the element size\n  synthwave.canvas = document.createElement('canvas')\n  // eslint-disable-next-line no-restricted-globals\n  synthwave.canvas.width = synthwave.w = innerWidth\n  // eslint-disable-next-line no-restricted-globals\n  synthwave.canvas.height = synthwave.h = innerHeight\n  // get the drawing context on the canvas by creating\n  //  a CanvasRenderingContext2D\n  synthwave.c = synthwave.canvas.getContext('2d')\n  // translate the starting points of the coordinate system to the center / middle of the canvas\n  synthwave.c?.translate(synthwave.w / 2, synthwave.h / 2)\n  // append the canvas to the html document body\n  element.appendChild(synthwave.canvas)\n  // Create a Matrix with 30 lines and 60 rows\n  //  by creating a Array with a length of 30 and fill each item with a value of 0\n  //  then map each item and change the value to a Array with a length of 60, each item filled with  a value of 0\n  synthwave.points = Array(30)\n    .fill(0)\n    .map(_ => Array(60).fill(0))\n  // Set x, y, z values for each coordinate of the Matrix\n  //  by looping each line\n  for (let i = 0; i < synthwave.points.length; i++) {\n    // and every row\n    for (let j = 0; j < synthwave.points[0].length; j++) {\n      // difference between the looped raws and the half row count\n      const dist = Math.abs(j - synthwave.points[0].length / 2)\n      synthwave.points[i][j] = {\n        x: j * synthwave.spacing, // x position increased in every loop by a factor of n+1\n        y: Math.random() * -(dist * dist) + 30, // y position randomly lowered in a flat tapered curve\n        z: -i * synthwave.zOffset, // z position of the column\n      }\n    }\n  }\n\n  // offset for creating squares\n  //  TODO: move to show()\n  synthwave.offset = (synthwave.points[0].length * synthwave.spacing) / 2\n\n  // Create a linear Gradient which has two colors for the sun\n  synthwave.gradient = synthwave.c?.createLinearGradient(0, -150, 0, 100)\n  synthwave.gradient?.addColorStop(0, 'gold')\n  synthwave.gradient?.addColorStop(1, 'rgb(200, 0, 100)')\n  update(0) // call the animation update\n}\n\n// Performance\n// eslint-disable-next-line no-unused-vars\n// let previousTime\n\n// update current z position and request a animation frame\nfunction update(_time: number) {\n  // the requestAnimationFrame callback has a single argument, a DOMHighResTimeStamp\n  // Check < -300\n  // DEBUG\n  // let z300CountSmaller = 0\n  // let z300CountBigger = 0\n  // update current z position\n  //  by looping each line\n  if (synthwave.points)\n    for (let i = 0; i < synthwave.points.length; i++) {\n      let gone = false\n      // and every row\n      for (let j = 0; j < synthwave.points[0].length; j++) {\n        synthwave.points[i][j].z -= 0.5\n        // TODO: Find out why -300?\n        if (synthwave.points[i][j].z < -300) {\n          gone = true\n          // DEBUG\n          // eslint-disable-next-line no-unused-vars\n        }\n        //   z300CountSmaller += 1\n        // } else {\n        //   // DEBUG\n        //   // eslint-disable-next-line no-unused-vars\n        //   z300CountBigger += 1\n        // }\n      }\n      if (gone) {\n        // remove the last row of the line and copy all other\n        const arr = synthwave.points.pop()\n        // loop the copy of rows and modify z and y position\n        if (arr) {\n          for (let k = 0; k < arr.length; k++) {\n            // difference between the looped raws and the half row count\n            const dist = Math.abs(k - arr.length / 2)\n            arr[k].z = 0 // TODO: why 0?\n            arr[k].y = Math.random() * -(dist * dist) + 30 // y position randomly lowered in a flat tapered curve\n          }\n          // add the copied line at the beginning of the matrix\n          synthwave.points.unshift(arr)\n        }\n      }\n    }\n  // create the sun and the squares\n  show()\n\n  // DEBUG\n  // console.log(`Smaller: ${z300CountSmaller} / Bigger: ${z300CountBigger}`)\n\n  // perform the animation\n  synthwave.u = requestAnimationFrame(update)\n\n  // Performance\n  // cancelAnimationFrame(u)\n  // if (previousTime !== time) {\n  //   u = requestAnimationFrame(update)\n  // }\n}\n\nfunction show() {\n  // Clear pixels in the context area and set them transparent black\n  if (!synthwave.c) return\n  synthwave.c.clearRect(\n    -synthwave.w / 2,\n    -synthwave.h / 2,\n    synthwave.w,\n    synthwave.h\n  )\n  // Start draw new in the cleared area\n  synthwave.c.beginPath()\n  // add a circular arc with a radius of 200 and a startAngel of PI * 2 (begin a new sub-path)\n  synthwave.c.arc(0, 0, 200, 0, Math.PI * 2)\n  // add a line from the current point to the current sub-path\n  synthwave.c.closePath()\n  // add shadow and blur and fill the current context\n  synthwave.c.shadowColor = 'orange'\n  synthwave.c.shadowBlur = 100\n  synthwave.c.fillStyle = synthwave.gradient || 'gold'\n  synthwave.c.fill()\n  // remove the shadow blur from the context for the upcoming squares\n  synthwave.c.shadowBlur = 0\n  // create squares and fill / stroke them to the current context\n  //  by looping each line\n  if (synthwave.points)\n    for (let i = 0; i < synthwave.points.length - 1; i++) {\n      // and each row\n      for (let j = 0; j < synthwave.points[0].length - 1; j++) {\n        const size = 300 / (300 + synthwave.points[i][j].z)\n        const nextSize = 300 / (300 + synthwave.points[i + 1][j].z)\n        // Start draw new (square) in the cleared area\n        synthwave.c.beginPath()\n        // Begin a new sub-path with smaller x and bigger y position\n        synthwave.c.moveTo(\n          (synthwave.points[i][j].x - synthwave.offset) * size,\n          synthwave.points[i][j].y * size\n        )\n        // Line to the next row and connect them\n        synthwave.c.lineTo(\n          (synthwave.points[i][j + 1].x - synthwave.offset) * size,\n          synthwave.points[i][j + 1].y * size\n        )\n        // Line to the next line and row and connect them\n        synthwave.c.lineTo(\n          (synthwave.points[i + 1][j + 1].x - synthwave.offset) * nextSize,\n          synthwave.points[i + 1][j + 1].y * nextSize\n        )\n        // Line to the next line and connect them\n        synthwave.c.lineTo(\n          (synthwave.points[i + 1][j].x - synthwave.offset) * nextSize,\n          synthwave.points[i + 1][j].y * nextSize\n        )\n        // line to the current sub-path to finish the square\n        synthwave.c.closePath()\n        // fill and stroke the square\n        const color = 300 + synthwave.points[i][j].z\n        synthwave.c.fillStyle = `rgba(0, 0, 0, ${\n          -synthwave.points[i][j].z / 100\n        })`\n        synthwave.c.strokeStyle = `rgba(${250 - color}, 0, ${50 + color}, ${\n          1 - color / 300\n        })`\n        synthwave.c.fill()\n        synthwave.c.stroke()\n      }\n    }\n}\n\nexport default init\n"
}
